#pragma once

#include <array>
#include <unordered_map>

#include "faker-cxx/system.h"

namespace faker::system
{
const auto commonInterfaceTypes = std::to_array<std::string_view>({
    "en",
    "wl",
    "ww",
});

const std::unordered_map<std::string_view, std::string_view> commonInterfaceSchemas = {
    {"index", "o"},
    {"slot", "s"},
    {"mac", "x"},
    {"pci", "p"},
};

const auto cronDayOfWeek = std::to_array<std::string_view>({
    "FRI",
    "MON",
    "SAT",
    "SUN",
    "THU",
    "TUE",
    "WED",
});

const auto directoryPaths = std::to_array<std::string_view>({
    "/etc/apache2",
    "/etc/httpd",
    "/etc/mail",
    "/etc/mysql",
    "/etc/nginx",
    "/etc/ssh",
    "/etc/ssl",
    "/home/user/backups",
    "/home/user/documents",
    "/home/user/downloads",
    "/home/user/music",
    "/home/user/pictures",
    "/home/user/public_html",
    "/home/user/videos",
    "/opt/app",
    "/opt/bin",
    "/opt/config",
    "/opt/data",
    "/opt/files",
    "/opt/logs",
    "/opt/scripts",
    "/tmp",
    "/usr/bin",
    "/usr/local/bin",
    "/usr/local/etc",
    "/usr/local/games",
    "/usr/local/include",
    "/usr/local/lib",
    "/usr/local/libexec",
    "/usr/local/man",
    "/usr/local/sbin",
    "/usr/local/share",
    "/usr/local/share/man",
    "/usr/local/src",
    "/usr/local/var",
    "/usr/share/fonts",
    "/var/cache/apt",
    "/var/lock",
    "/var/log",
    "/var/log/apache2",
    "/var/run",
    "/var/spool/cron",
    "/var/spool/mail",
    "/var/tmp",
    "/var/www/cgi-bin",
    "/var/www/cgi-bin",
    "/var/www/docs",
    "/var/www/html",
    "/var/www/icons",
    "/var/www/logs",
});

const auto mimeTypes = std::to_array<std::string_view>({
    "application/atom+xml",
    "application/font-woff",
    "application/gzip",
    "application/java-archive",
    "application/javascript",
    "application/json",
    "application/ld+json",
    "application/msword",
    "application/octet-stream",
    "application/ogg",
    "application/pdf",
    "application/rdf+xml",
    "application/rtf",
    "application/vnd.apple.mpegurl",
    "application/vnd.ms-excel",
    "application/vnd.ms-fontobject",
    "application/vnd.openxmlformats-officedocument.presentationml.presentation",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    "application/x-7z-compressed",
    "application/x-font-ttf",
    "application/x-javascript",
    "application/x-mpegURL",
    "application/x-rar-compressed",
    "application/x-shockwave-flash",
    "application/x-tar",
    "application/x-www-form-urlencoded",
    "application/xhtml+xml",
    "application/xml",
    "application/zip",
    "audio/aac",
    "audio/midi",
    "audio/mpeg",
    "audio/ogg",
    "audio/wav",
    "audio/webm",
    "font/woff",
    "font/woff2",
    "image/apng",
    "image/bmp",
    "image/gif",
    "image/jpeg",
    "image/png",
    "image/svg+xml",
    "image/tiff",
    "image/webp",
    "image/x-icon",
    "multipart/form-data",
    "text/calendar",
    "text/css",
    "text/csv",
    "text/html",
    "text/javascript",
    "text/plain",
    "text/xml",
    "video/3gpp",
    "video/3gpp2",
    "video/mp2t",
    "video/mp4",
    "video/mpeg",
    "video/ogg",
    "video/webm",
    "video/x-flv",
    "video/x-msvideo",
});

const std::unordered_map<std::string_view, std::string_view> mimeTypesExtensions{
    {"application/atom+xml", "xml"},
    {"application/font-woff", "woff"},
    {"application/gzip", "gz"},
    {"application/java-archive", "jar"},
    {"application/javascript", "js"},
    {"application/ld+json", "jsonld"},
    {"application/msword", "doc"},
    {"application/octet-stream", "bin"},
    {"application/ogg", "ogx"},
    {"application/vnd.ms-excel", "xls"},
    {"application/vnd.ms-fontobject", "eot"},
    {"application/vnd.openxmlformats-officedocument.presentationml.presentation", "pptx"},
    {"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "xlsx"},
    {"application/vnd.openxmlformats-officedocument.wordprocessingml.document", "docx"},
    {"application/x-7z-compressed", "7z"},
    {"application/x-tar", "tart"},
    {"application/xhtml+xml", "xhtml"},
    {"audio/ogg", "oga"},
    {"audio/webm", "weba"},
    {"audio/mpeg", "mp3"},
    {"image/svg+xml", "svg"},
    {"text/calendar", "ics"},
    {"text/javascript", "js"},
    {"text/plain", "txt"},
    {"video/3gpp", "3gp"},
    {"video/3gpp2", "3g2"},
    {"video/mp2t", "ts"},
    {"video/ogg", "ogv"},
    {"video/x-msvideo", "avi"},
};

const auto commonMimeTypes = std::to_array<std::string_view>({
    "application/pdf",
    "audio/mpeg",
    "audio/wav",
    "image/gif",
    "image/jpeg",
    "image/png",
    "text/html",
    "video/mp4",
    "video/mpeg",
});

const auto commonFileTypes = std::to_array<std::string_view>({
    "application",
    "audio",
    "image",
    "text",
    "video",
});
}
