#pragma once

#include <array>
#include <string_view>

namespace faker::computer
{
const auto computerTypes = std::to_array<std::string_view>({"Desktop",
                                                            "Laptop",
                                                            "Mainframe",
                                                            "Supercomputer",
                                                            "Notebook",
                                                            "All-in-One",
                                                            "Workstation",
                                                            "Tablet",
                                                            "Server",
                                                            "Mini PC",
                                                            "Netbook",
                                                            "Chromebook",
                                                            "Mac",
                                                            "Gaming PC",
                                                            "Raspberry Pi",
                                                            "Virtual Machine",
                                                            "Embedded System",
                                                            "Hybrid Laptop",
                                                            "Convertible Laptop",
                                                            "Thin Client",
                                                            "Cloud Computer",
                                                            "Business PC",
                                                            "Industrial PC",
                                                            "Convertible Tablet",
                                                            "Touchscreen PC",
                                                            "Wearable Computer",
                                                            "Virtual Desktop"

});

const auto computerManufacturers = std::to_array<std::string_view>({
    "Acer",
    "Alienware",
    "Apple",
    "Asus",
    "Compaq",
    "Dell",
    "Fujitsu",
    "Gateway",
    "HCL",
    "HP",
    "IBM",
    "LG",
    "Lenovo",
    "MSI",
    "Microsoft",
    "Panasonic",
    "Razer",
    "Samsung",
    "Sony",
    "Toshiba",
    "Microsoft Surface",
    "Google",
    "Huawei",
    "Razer",
    "Xiaomi",
    "Sharp",
    "Zotac",
    "MSI",
    "Gigabyte",
    "ECS",
    "Intel",
    "Vizio",
    "OnePlus",
    "Meizu",
    "Vivo",
    "Asrock",
    "Acer Predator",
    "Medion",
    "Oculus",
    "Corsair",
    "BenQ",
    "Corsair",
    "Aorus",
    "Porsche Design",
    "Dynabook",
    "Toshiba Tecra",
    "Epson",
    "Rock",
    "Clevo",
    "EVGA",
});

const auto computerModels = std::to_array<std::string_view>({
    "Alienware",      "Area-51",     "Aspire",    "Aurora",    "Blade",       "Blade Stealth",
    "EliteBook",      "Envy",        "GE Series", "GL Series", "GS Series",   "Galaxy Book",
    "IdeaPad",        "Inspiron",    "Latitude",  "Legion",    "Mac mini",    "MacBook Air",
    "MacBook Pro",    "NUC",         "Notebook",  "Odyssey",   "Pavilion",    "Precision",
    "Predator",       "Presario",    "ROG",       "Satellite", "Spectre",     "Surface Book",
    "Surface Laptop", "Surface Pro", "Swift",     "TUF",       "ThinkCentre", "ThinkPad",
    "ThinkStation",   "TravelMate",  "VAIO",      "VivoBook",  "XPS",         "Yoga",
    "ZenBook",        "iMac",        "m15",
});

const auto cpuManufacturers = std::to_array<std::string_view>({
    "AMD",
    "ARM",
    "Apple",
    "IBM",
    "Intel",
});

const auto cpuTypes = std::to_array<std::string_view>({
    "32-bit",
    "64-bit",
    "ARM",
    "CISC",
    "Deca-Core",
    "Dual-Core",
    "Heterogeneous System Architecture",
    "Hexa-Core",
    "Octa-Core",
    "Quad-Core",
    "RISC",
    "x86",
});

const auto cpuModels = std::to_array<std::string_view>({
    "ARM Cortex-A55",
    "ARM Cortex-A76",
    "ARM Cortex-A78",
    "Apple M1",
    "Apple M1 Max",
    "Apple M1 Ultra",
    "Apple M2",
    "Apple M2 Max",
    "Apple M2 Pro",
    "Apple M3 Max",
    "Apple M3 Pro",
    "Apple M3 Ultra",
    "Apple M3 Ultra",
    "Athlon 3000G",
    "Core i3-10100",
    "Core i5-11600K",
    "Core i7-11700K",
    "Core i9-11900K",
    "EPYC 7763",
    "IBM POWER9",
    "Pentium Gold G6400",
    "Ryzen 3 3300X",
    "Ryzen 5 5600X",
    "Ryzen 7 5800X",
    "Ryzen 9 5950X",
    "Xeon E-2278G",
    "Intel Core i3-10320",
    "Intel Core i5-10600K",
    "Intel Core i7-10700K",
    "Intel Core i9-10900K",
    "Intel Core i9-11900KF",
    "Intel Core i5-12600K",
    "Intel Core i7-12700K",
    "Intel Core i9-12900K",
    "AMD Ryzen 3 1200",
    "AMD Ryzen 5 2600",
    "AMD Ryzen 7 3700X",
    "AMD Ryzen 9 3900X",
    "AMD Ryzen 5 3600X",
    "AMD Ryzen 9 5900X",
    "AMD Ryzen 9 7950X",
    "Intel Xeon Platinum 8280",
    "Intel Xeon Gold 6248R",
    "Intel Xeon Silver 4216",
    "AMD Threadripper 3960X",
    "AMD Threadripper 3970X",
    "AMD Threadripper 3990X",
    "Qualcomm Snapdragon 8 Gen 1",
    "Qualcomm Snapdragon 8cx Gen 3",
    "Qualcomm Snapdragon 888",
    "MediaTek Dimensity 1200",
    "NVIDIA Tegra X1",
    "IBM POWER10",
    "Apple A14 Bionic",
    "Apple A15 Bionic",
    "Apple A16 Bionic",
    "Intel Core i5-13400F",
    "Intel Core i9-13900K",
    "AMD EPYC 7742",
    "AMD EPYC 7763",
    "AMD Ryzen 9 5950X3D",
    "AMD Ryzen 7 5800X3D",
    "Intel Core i3-11100T",
    "Intel Core i7-1165G7",
});

const auto gpuManufacturers = std::to_array<std::string_view>({
    "AMD",
    "ARM",
    "Intel",
    "NVIDIA",
    "Qualcomm",
});

const auto gpuTypes = std::to_array<std::string_view>({
    "Discrete",
    "Integrated",
});

const auto gpuModels = std::to_array<std::string_view>({
    "3dfx Voodoo3",
    "AMD Radeon RX 6700 XT",
    "AMD Radeon RX 6800 XT",
    "AMD Radeon RX 6900 XT",
    "ARM Mali-G78 MP14",
    "ATI Radeon 9800 Pro",
    "Imagination PowerVR GT7600",
    "Intel Xe Graphics",
    "Matrox Millennium G200",
    "NVIDIA GeForce GTX 1650",
    "NVIDIA GeForce GTX 1650 Super",
    "NVIDIA GeForce GTX 1660",
    "NVIDIA GeForce GTX 1660 Super",
    "NVIDIA GeForce GTX 1660 Ti",
    "NVIDIA GeForce RTX 3070",
    "NVIDIA GeForce RTX 3080",
    "NVIDIA GeForce RTX 3090",
    "Qualcomm Adreno 660",
    "S3 Graphics Savage4",
    "SiS 315",
    "Trident Blade3D",
    "VIA S3 Graphics Chrome 520",
    "XGI Volari V8",
    "NVIDIA GeForce GTX 1050 Ti",
    "NVIDIA GeForce GTX 1060",
    "NVIDIA GeForce GTX 1070",
    "NVIDIA GeForce GTX 1080",
    "NVIDIA GeForce GTX 1080 Ti",
    "NVIDIA GeForce RTX 2060",
    "NVIDIA GeForce RTX 2070",
    "NVIDIA GeForce RTX 2080",
    "NVIDIA GeForce RTX 2080 Ti",
    "NVIDIA GeForce RTX 3070 Ti",
    "NVIDIA GeForce RTX 3080 Ti",
    "NVIDIA GeForce RTX 3090 Ti",
    "AMD Radeon RX 5700 XT",
    "AMD Radeon RX 5600 XT",
    "AMD Radeon RX 5500 XT",
    "AMD Radeon RX 480",
    "AMD Radeon RX 580",
    "AMD Radeon RX 590",
    "AMD Radeon RX Vega 56",
    "AMD Radeon RX Vega 64",
    "Intel Iris Xe MAX",
    "Intel HD Graphics 630",
    "Qualcomm Adreno 730",
    "ARM Mali-G52 MP6",
    "ARM Mali-G76 MP12",
    "Imagination PowerVR Series 8XT",
    "Matrox Parhelia",
    "VIA S3 Graphics Chrome 530",
    "S3 Graphics SuperSavage",
    "Trident Cyber 9397",
    "XGI Volari V3XT",
    "NVIDIA TITAN V",
    "NVIDIA TITAN RTX",
});

}
